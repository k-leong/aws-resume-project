name: Test Infrastructure

on:
  push:
    paths-ignore:
      - 'backend/**'
      - 'frontend/**'

env:
  AWS_REGION : "us-west-1"
  AWS_DEFAULT_OUTPUT: json

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infrastructure

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: install aws cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          arch: amd64

      - name: Create backend config
        id: create_backend
        run: |
          echo "bucket=\"${{ secrets.REMOTE_BUCKET }}\"" > backend.conf
          echo "key=\"${{ secrets.REMOTE_KEY }}\"" >> backend.conf
          echo "dynamodb_table=\"${{ secrets.REMOTE_LOCK_TABLE }}\"" >> backend.conf
          echo "assume_role = {role_arn=\"${{ secrets.REMOTE_ROLE_ARN }}\"}" >> backend.conf
          echo "" >> backend.conf

      - name: Convert to utf-8
        id: convert
        run: |
          if [[ $(file -bi backend.conf) != *"utf-8"* ]]; then
            (echo -ne '\xEF\xBB\xBF'; cat backend.conf) > temp && mv temp backend.conf
          fi
          iconv -f us-ascii -t utf-8 backend.conf -o backend.conf || \
          (cat backend.conf | awk '{print}' > temp && mv temp backend.conf)

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=backend.conf

      - name: get caller identity
        run : aws sts get-caller-identity --no-cli-pager

      - name: Assume AWS IAM Role
        id: configureCreds
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with: 
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
        continue-on-error: true

      - name: Assume Role Failure
        if: steps.configureCreds.outcome == 'failure'
        run: |
          echo "job failed"
          aws sts get-caller-identity
          exit 1

      # - name: Generate tfstate file
      #   id: generate_filename
      #   run: |
      #     export filename="resume"
      #     echo "filename ${filename}"
      #     echo "filename=${filename}.tfstate" >> $GITHUB_OUTPUT

      - name: Terraform Plan
        id: plan
        run: terraform plan
      
      # - name: Terraform Apply
      #   id: apply
      #   run: terraform apply --auto-approve
      #   continue-on-error: true

      # - name: Terraform Destroy
      #   id: destroy
      #   if: steps.apply.outcome == 'failure'
      #   run: |
      #     terraform destroy --auto-approve
      #     echo "resources destroyed"
      #     exit 1

      # - name: Store State in S3
      #   id: store_state_in_s3
      #   if: steps.apply.outcome == 'success'
      #   run: |
      #     cat terraform.tfstate | base64 -w 0 > ${{steps.generate_filename.outputs.filename}}
      #     aws s3 cp ${{steps.generate_filename.outputs.filename}} ${{ secrets.S3_URI }}

      # - name: Terraform Clean up
      #   id: clean_up_on_success
      #   if: steps.store_state_in_s3.outcome == 'success'
      #   run: |
      #     rm -rf ${{steps.generate_filename.outputs.filename}}
      #     terraform destroy --auto-approve
      #     echo "terraform clean up"
      #     exit 0

      # - name: Terraform Clean up
      #   id: clean_up_on_failure
      #   if: steps.store_state_in_s3.outcome == 'failure'
      #   run: |
      #     rm -rf ${{steps.generate_filename.outputs.filename}}
      #     terraform destroy --auto-approve
      #     echo "resources destroyed"
      #     exit 1
