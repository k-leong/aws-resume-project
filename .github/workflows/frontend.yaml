name: Frontend

on:
  push:
    paths-ignore:
      - 'infrastructure/**'
      - 'backend/**'
      - 'README.md'
      - 'image.png'
      - '.gitignore'
      - '.github/workflows/test_infrastructure.yaml'
      - '.github/workflows/deploy_infrastructure.yaml'
      - '.github/workflows/test_lambda.yaml'
      - '.github/workflows/deploy_lambda.yaml'

env:
  AWS_REGION : "us-west-1"
  AWS_DEFAULT_OUTPUT: json

permissions:
  id-token: write
  contents: read
  
jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: install aws cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          arch: amd64

      - name: Assume AWS IAM Role
        id: configureCreds
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with: 
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
        continue-on-error: true

      - name: Assume Role Failure
        if: steps.configureCreds.outcome == 'failure'
        run: |
          echo "job failed"
          aws sts get-caller-identity --no-cli-pager
          exit 1

      - name: Create config
        run: echo '${{ secrets.CONFIG_JSON }}' > config.json

      - name: Build HTML
        run: node build.js

      - name: Upload to S3 
        run: aws s3 sync dist/ ${{ secrets.S3_BUCKET }} --delete --size-only --exclude "kennyleong.pdf"

      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DIST_ID }} --paths "/*"

      # - name: Get current CloudFront config
      #   run: |
      #     aws cloudfront get-distribution-config --id ${{ secrets.AWS_CLOUDFRONT_DIST_ID }} > dist-config.json
      #     jq '.DistributionConfig' dist-config.json > config.json

      # - name: Modify config
      #   run: |
      #     jq '.Aliases.Items = ["kennyleong-resume.com/"] | .Aliases.Quantity = 1' config.json > updated-config.json
      #     jq \
      #       --arg acmArn ${{ secrets.AWS_ACM_ARN }} \
      #     '.ViewerCertificate.CloudFrontDefaultCertificate = false' | '.ViewerCertificate.ACMCertificateArn = $acmArn' config.json > updated-config.json

      # - name: Update CloudFront distribution
      #   run: |
      #     ETAG=$(jq '.ETag' dist-config.json)
      #     aws cloudfront update-distribution \
      #       --id ${{ secrets.AWS_CLOUDFRONT_DIST_ID }} \
      #       --if-match "$ETAG" \
      #       --distribution-config file://updated-config.json